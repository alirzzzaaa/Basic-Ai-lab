# -*- coding: utf-8 -*-
"""A* Rep 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iC1v6HdtnkTfByitm_UH9NWetKBNdxJ7

**# heapq**

**#Q: Compare the solution paths found by BFS, DFS, and A***

Ans:
*   BFS:
(0, 0) → (4, 0) → (1, 3)
*   DFS:
(0, 0) → (0, 3) → (3, 0) → (3, 3) → (4, 2) → (4, 0) → (1, 3)
*   A*:
(0, 0) → (4, 0) → (1, 3)

**#Q: Which algorithm gives the shortest path? Why?**

**Ans:**



*   BFS always finds the shortest path in unweighted problems like this by exploring all states breadth-wise, layer by layer—so the first time the goal is encountered, it is at minimal depth.
*   A* also found the shortest path here as expected, since the heuristic is simple and admissible (it never overestimates distance to the goal). A* prioritizes states closer to the goal, so with a good heuristic, it matches or sometimes outperforms BFS in step minimization.
*   DFS does not guarantee the shortest path. It follows a single path as deep as possible, possibly visiting non-optimal, longer solutions first.

**#Q: Which algorithm is more efficient in terms of time and memory?**

**Ans:**

* Memory:

    DFS is the most memory efficient; it only has to keep track of the current path and visited set, but can risk deep recursion or stack overflow in very large graphs.

    BFS queues all frontier nodes at each level, so memory use can grow quickly in problems with large branching factors.

    A*'s memory usage is typically similar to or higher than BFS because it stores all possible paths. However, a strong heuristic can prune irrelevant paths quickly.

* Time:

    BFS is efficient for finding the shortest path in unweighted graphs but can be slow in very large search spaces due to wide exploration.

    A* is often the most time-efficient if the heuristic is well-chosen, as it directs the search toward the goal more directly.

    DFS may be fast for finding "a" solution, especially if the solution lies deep, but is not efficient for shortest path and can get stuck exploring long or infinite branches.
"""