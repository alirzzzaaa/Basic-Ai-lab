# -*- coding: utf-8 -*-
"""A* Rep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iC1v6HdtnkTfByitm_UH9NWetKBNdxJ7

**# Queue**
"""

import heapq

road_map = {
    "São Paulo": {"Rio de Janeiro": 355, "Curitiba": 408},
    "Rio de Janeiro": {"São Paulo": 355, "Belo Horizonte": 434},
    "Curitiba": {"São Paulo": 408, "Porto Alegre": 712},
    "Porto Alegre": {"Curitiba": 712, "Brasília": 1610},
    "Belo Horizonte": {"Rio de Janeiro": 434},
    "Brasília": {"Porto Alegre": 1610}
}

direct_distance = {
    "São Paulo": 1015,
    "Rio de Janeiro": 1140,
    "Curitiba": 1440,
    "Porto Alegre": 1610,
    "Belo Horizonte": 716,
    "Brasília": 0
}

def shortest_route(road_map, origin, destination, direct_distance):
    to_explore = []
    heapq.heappush(to_explore, (direct_distance[origin], [origin]))
    cost_so_far = {origin: 0}
    visited = set()

    while to_explore:
        current_priority, journey = heapq.heappop(to_explore)
        current_city = journey[-1]

        if current_city == destination:
            return journey, cost_so_far[current_city]

        if current_city in visited:
            continue

        visited.add(current_city)

        for neighbor, distance in road_map[current_city].items():
            candidate_cost = cost_so_far[current_city] + distance
            if neighbor not in cost_so_far or candidate_cost < cost_so_far[neighbor]:
                cost_so_far[neighbor] = candidate_cost
                priority = candidate_cost + direct_distance.get(neighbor, float('inf'))
                heapq.heappush(to_explore, (priority, journey + [neighbor]))
    return None, float('inf')

if __name__ == "__main__":
    start = "São Paulo"
    goal = "Brasília"
    route, total_distance = shortest_route(road_map, start, goal, direct_distance)
    print("Optimal route:", route)
    print("Total distance:", total_distance)